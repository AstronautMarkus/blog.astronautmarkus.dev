---
import Navbar from "../components/navbar.astro";
import Footer from "../components/footer.astro";
import Scripts from "../components/scripts.astro";
import BlogIndex from "../components/blogIndex.astro";
import SharePost from "../components/sharePost.astro";

const { frontmatter } = Astro.props;

const { 
    title = "Untitled Post",
    description = "No description available.",
    image = "/img/banner-en.png",
    errorImage = "/img/error-banner.png",
    imageAlt = "Blog Banner Image",
    author = "AstronautMarkus",
    publishDate,
    pubDate,
    modifiedDate,
    canonical,
    noindex = false,
    type = "article",
    tags = [],
} = frontmatter || {};

import "../css/global.css";
import "../css/blogDetail.css";

const finalPublishDate = publishDate || pubDate;

const siteUrl = import.meta.env.SITE_URL || "https://blog.astronautmarkus.dev";
const siteName = import.meta.env.SITE_NAME || "blog.astronautmarkus.dev";

const currentUrl = new URL(Astro.request.url);
const canonicalUrl = canonical || new URL(currentUrl.pathname, siteUrl).href;
const bannerImage = new URL(image, siteUrl).href;

const formatDate = (dateString: string) => {
    if (!dateString) return "Date not available";
    
    if (dateString.match(/^\d{4}-\d{2}-\d{2}$/)) {
        const [year, month, day] = dateString.split('-').map(Number);
        const date = new Date(year, month - 1, day);
        return date.toLocaleDateString('en-US', { 
            year: 'numeric', 
            month: 'long', 
            day: 'numeric' 
        });
    }
    
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', { 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric' 
    });
};

// Colores para las etiquetas
const tagColors = ['is-primary', 'is-info', 'is-success', 'is-warning', 'is-danger', 'is-link'];

const structuredData = {
    "@context": "https://schema.org",
    "@type": "BlogPosting",
    "headline": title,
    "description": description,
    "image": bannerImage,
    "author": {
        "@type": "Person",
        "name": author,
        "url": "https://astronautmarkus.dev"
    },
    "publisher": {
        "@type": "Organization",
        "name": siteName,
        "logo": {
            "@type": "ImageObject",
            "url": `${siteUrl}/logo.png`
        }
    },
    "url": canonicalUrl,
    "mainEntityOfPage": {
        "@type": "WebPage",
        "@id": canonicalUrl
    },
    ...(finalPublishDate && { "datePublished": finalPublishDate }),
    ...(modifiedDate && { "dateModified": modifiedDate }),
    ...(tags.length > 0 && { "keywords": tags.join(", ") })
};
---

<html lang="en">
    <head>
        <meta charset="utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        
        <title>{title}</title>
        <meta name="description" content={description} />
        <meta name="author" content={author} />
        {tags && tags.length > 0 && <meta name="keywords" content={tags.join(", ")} />}
        {noindex && <meta name="robots" content="noindex, nofollow" />}
        
        <link rel="canonical" href={canonicalUrl} />
        
        <meta property="og:type" content={type} />
        <meta property="og:title" content={title} />
        <meta property="og:description" content={description} />
        <meta property="og:image" content={bannerImage} />
        <meta property="og:image:alt" content={imageAlt} />
        <meta property="og:url" content={canonicalUrl} />
        <meta property="og:site_name" content={siteName} />
        <meta property="og:locale" content="en_US" />
        
        <meta name="twitter:card" content="summary_large_image" />
        <meta name="twitter:site" content="@astronautmarkus" />
        <meta name="twitter:creator" content="@astronautmarkus" />
        <meta name="twitter:title" content={title} />
        <meta name="twitter:description" content={description} />
        <meta name="twitter:image" content={bannerImage} />
        <meta name="twitter:image:alt" content={imageAlt} />

        <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/gh/devicons/devicon@latest/devicon.min.css" />

        
        {type === "article" && finalPublishDate && (
            <meta property="article:published_time" content={finalPublishDate} />
        )}
        {type === "article" && modifiedDate && (
            <meta property="article:modified_time" content={modifiedDate} />
        )}
        {type === "article" && (
            <meta property="article:author" content={author} />
        )}
        {type === "article" && tags && tags.map((tag:any) => (
            <meta property="article:tag" content={tag} />
        ))}
        
        <link rel="icon" type="image/svg+xml" href="/favicon.jpg" />
        <link rel="icon" type="image/png" href="/favicon.jpg" />
        <link rel="apple-touch-icon" href="/favicon.jpg" />
        
        <meta name="theme-color" content="#3273dc" />
        <meta name="color-scheme" content="light" />
        
        <script type="application/ld+json" set:html={JSON.stringify(structuredData)} />

        
        <style>
            html, body {
                height: 100%;
            }
            body {
                display: flex;
                flex-direction: column;
            }
            .main-content {
                flex: 1;
            }
        </style>
    </head>
    <body>
        <Navbar />

        <BlogIndex />

        <section class="section main-content">
            <div class="container">
                <div class="columns">
                    <div class="column is-8 is-offset-2">
                        <article class="blog-post">
                            <header class="blog-header mb-5">
                                <h1 class="title is-2 has-text-weight-bold mb-3 mt-6 has-text-secondary">{title}</h1>

                                <div class="blog-hero-image mb-5">
                                    <figure class="image">
                                        <img 
                                            src={image} 
                                            alt={imageAlt} 
                                            onerror={`this.src='${errorImage}'; this.onerror=null;`}
                                        />
                                    </figure>
                                </div>

                                <p class="subtitle is-5 has-text-grey mb-4">"{description}"</p>

                                {tags && tags.length > 0 && (
                                    <div class="tags">
                                        {tags.map((tag: string, index: number) => (
                                            <span class={`tag ${tagColors[index % tagColors.length]}`}>{tag}</span>
                                        ))}
                                    </div>
                                )}

                                <div class="blog-dates mt-3">
                                    {finalPublishDate ? (
                                        <p class="has-text-grey is-size-7">
                                            <strong>Published:</strong> {formatDate(finalPublishDate)}
                                        </p>
                                    ) : (
                                        <p class="has-text-grey is-size-7">
                                            <strong>Published:</strong> Date not available
                                        </p>
                                    )}
                                    {modifiedDate && (
                                        <p class="has-text-grey is-size-7">
                                            <strong>Modified:</strong> {formatDate(modifiedDate)}
                                        </p>
                                    )}
                                </div>
                            </header>

                            <div class="content blog-content">
                                <slot />
                            </div>

                            <SharePost 
                                title={title}
                                description={description}
                                url={canonicalUrl}
                            />

                            <footer class="blog-author-footer mt-5 pt-4">
                                <div class="media">
                                    <div class="media-left">
                                        <figure class="image is-48x48">
                                            <img class="is-rounded" src="https://github.com/astronautmarkus.png" alt="AstronautMarkus Profile" />
                                        </figure>
                                    </div>
                                    <div class="media-content">
                                        <div class="content">
                                            <p class="has-text-grey is-size-6 mb-0">
                                                <strong>AstronautMarkus</strong> (Marcos Reyes M.)
                                            </p>
                                        </div>
                                    </div>
                                </div>
                            </footer>
                        </article>
                    </div>
                </div>
            </div>
        </section>

        <Footer />

        <Scripts />

        <script>
            // Image error handling function
            function handleImageError(img, fallbackSrc) {
                if (img.src !== fallbackSrc) {
                    img.src = fallbackSrc;
                    img.onerror = null;
                }
            }

            // Apply error handling to all images in blog content
            document.addEventListener('DOMContentLoaded', function() {
                const contentImages = document.querySelectorAll('.blog-content img');
                contentImages.forEach(img => {
                    img.onerror = function() {
                        handleImageError(this, '${errorImage}');
                    };
                });

                const codeBlocks = document.querySelectorAll('.blog-content pre');
                
                codeBlocks.forEach((pre, index) => {
                    const container = document.createElement('div');
                    container.className = 'code-block-container';
                    
                    if (pre.parentNode) {
                        pre.parentNode.insertBefore(container, pre);
                        container.appendChild(pre);
                    }
                    
                    const copyButton = document.createElement('button');
                    copyButton.className = 'copy-button';
                    copyButton.innerHTML = '<span class="icon">📋</span>Copy';
                    copyButton.setAttribute('aria-label', 'Copy code to clipboard');
                    copyButton.setAttribute('data-code-index', index.toString());
                    
                    container.appendChild(copyButton);
                    
                    copyButton.addEventListener('click', async function() {
                        const code = pre.querySelector('code') || pre;
                        const textToCopy = code.textContent || '';
                        
                        try {
                            await navigator.clipboard.writeText(textToCopy);
                            
                            const originalContent = copyButton.innerHTML;
                            copyButton.innerHTML = '<span class="icon">✅</span>Copied!';
                            copyButton.classList.add('copied');
                            
                            setTimeout(() => {
                                copyButton.innerHTML = originalContent;
                                copyButton.classList.remove('copied');
                            }, 2000);
                            
                        } catch (err) {
                            console.error('Failed to copy code: ', err);
                            
                            const textArea = document.createElement('textarea');
                            textArea.value = textToCopy;
                            textArea.style.position = 'fixed';
                            textArea.style.left = '-999999px';
                            document.body.appendChild(textArea);
                            textArea.focus();
                            textArea.select();
                            
                            try {
                                document.execCommand('copy');
                                copyButton.innerHTML = '<span class="icon">✅</span>Copied!';
                                copyButton.classList.add('copied');
                                
                                setTimeout(() => {
                                    copyButton.innerHTML = '<span class="icon">📋</span>Copy';
                                    copyButton.classList.remove('copied');
                                }, 2000);
                            } catch (fallbackErr) {
                                console.error('Fallback copy failed: ', fallbackErr);
                                copyButton.innerHTML = '<span class="icon">❌</span>Failed';
                                setTimeout(() => {
                                    copyButton.innerHTML = '<span class="icon">📋</span>Copy';
                                }, 2000);
                            }
                            
                            document.body.removeChild(textArea);
                        }
                    });
                });
            });
        </script>
    </body>
</html>